stages:
  - build
  - deploy

variables:
  IMAGE_NAME: "$CI_REGISTRY_IMAGE"
  IMAGE_TAG: "main"

# --- Build Stage ---
build_vitepress_image:
  stage: build
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - echo "üîë Login zur GitLab-Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - echo "üèóÔ∏è Baue VitePress Docker Image..."
    - docker build -t "$IMAGE_NAME:$IMAGE_TAG" -f packages/docs/Dockerfile packages/docs/
    - echo "‚¨ÜÔ∏è Pushe Image zur Registry..."
    - docker push "$IMAGE_NAME:$IMAGE_TAG"

# --- Deploy Stage ---
deploy_vitepress_to_server:
  stage: deploy
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      needs: [build_vitepress_image]
  before_script:
    - "which ssh-agent || (apk add --update openssh-client)"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "üöÄ Deploye VitePress auf den Server..."
    - |
      ssh $SERVER_USER@$SERVER_IP "
        set -e 

        echo '--- DEBUG-START ---'
        echo 'Registry: $CI_REGISTRY'
        echo 'Deploy User: $CI_DEPLOY_USER'
        echo 'Passwort-L√§nge: ${#CI_DEPLOY_PASSWORD}'
        echo '--- DEBUG-ENDE ---'

        echo 'üîë Login zur GitLab-Registry auf dem Server...';
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

        echo '‚¨áÔ∏è Ziehe neues Image via docker-compose...';
        docker-compose pull;
        
        echo 'üîÑ Starte Container neu...';
        docker-compose up -d;
        
        echo 'üßπ Aufr√§umen...';
        docker image prune -f;
      "
